{-# LANGUAGE OverloadedStrings, ExistentialQuantification #-}
module Crud where

import Prelude
import Model
import Yesod
--import Yesod.Form
import Data.Text (Text)
--import Text.Shakespeare.I18N
import Control.Applicative
import Text.Blaze (ToMarkup)


class EntityForm a where
    toAForm :: (MonadHandler m, RenderMessage (HandlerSite m) FormMessage) =>
        Maybe a -> AForm m a

instance EntityForm Faq where
    toAForm entityMay = Faq
        <$> fieldForm FaqName entityMay
        <*> fieldForm FaqContent entityMay
        <*> fieldForm FaqOrder entityMay

fieldForm :: (RenderMessage site FormMessage, MonadHandler m,
           HandlerSite m ~ site, ToField t,
           EntityFieldsForm a, EntityFieldLabeled a) =>
    EntityField a t -> Maybe a -> AForm m t
fieldForm field entityMay = areq toField
    (fieldSettingsLabel $ fieldLabel field)
    (fieldValue field <$> entityMay)


class EntityFieldsForm a where
    fieldValue :: EntityField a t -> a -> t

-- FIXME: should be generated by TH
instance EntityFieldsForm Faq where
    fieldValue FaqId = undefined -- FIXME
    fieldValue FaqName = faqName
    fieldValue FaqContent = faqContent
    fieldValue FaqOrder = faqOrder


class EntityFieldLabeled a where
    -- FIXME: generalize to RenderMessage site msg
    fieldLabel :: EntityField a t -> Text

-- FIXME: user should generate it with TH or easily overriden
instance EntityFieldLabeled Faq where
    fieldLabel FaqId = "Id" :: Text
    fieldLabel FaqName = "Name" :: Text
    fieldLabel FaqContent = "Content" :: Text
    fieldLabel FaqOrder = "Order" :: Text


class ToField a where
    toField :: Monad m => RenderMessage (HandlerSite m) FormMessage =>
        Field m a

instance ToField Text where
    toField = textField

instance ToField Int where
    toField = intField
